file: '../customFunctions.js'
group: parseAndRender
suites: [customFunctions]
---
### Custom Functions Tests
suite: customFunctions
exportName: default
---
case: math functions - add
in:
  - sum: "${add(10, 20)}"
    result: "${add(a, b)}"
  - a: 5
    b: 3
out:
  sum: 30
  result: 8
---
case: math functions - multiply
in:
  - product: "${multiply(5, 6)}"
    calculation: "${multiply(x, y)}"
  - x: 7
    y: 4
out:
  product: 30
  calculation: 28
---
case: string functions - capitalize
in:
  - name: "${capitalize(firstName)}"
    greeting: "Hello ${capitalize(name)}!"
  - firstName: "john"
    name: "alice"
out:
  name: "John"
  greeting: "Hello Alice!"
---
case: string functions - uppercase and length
in:
  - greeting: "${uppercase(message)}"
    count: "${length(text)}"
  - message: "hello there"
    text: "testing"
out:
  greeting: "HELLO THERE"
  count: 7
---
case: collection functions - join and size
in:
  - list: "${join(hobbies, ', ')}"
    arraySize: "${size(hobbies)}"
  - hobbies: ["reading", "coding", "hiking"]
out:
  list: "reading, coding, hiking"
  arraySize: 3
---
case: nested function calls
in:
  - result: "${multiply(add(5, 3), 2)}"
    processed: "${uppercase(capitalize(name))}"
  - name: "johnsmith"
out:
  result: 16
  processed: "JOHNSMITH"
---
case: functions in string interpolation
in:
  - summary: "${name} has ${size(hobbies)} hobbies: ${join(hobbies, ', ')}"
  - name: "Alice"
    hobbies: ["reading", "coding", "hiking"]
out:
  summary: "Alice has 3 hobbies: reading, coding, hiking"
---
case: functions returning objects - createUser
in:
  - user: "${createUser(name, age)}"
    profile: "${createUser(firstName, userAge)}"
  - name: "Alice"
    age: 25
    firstName: "Bob"
    userAge: 17
out:
  user:
    name: "Alice"
    age: 25
    isAdult: true
    metadata:
      createdAt: 1640995200000
      version: 1
  profile:
    name: "Bob"
    age: 17
    isAdult: false
    metadata:
      createdAt: 1640995200000
      version: 1
---
case: functions returning objects - getStats
in:
  - stats: "${getStats(hobbies)}"
    emptyStats: "${getStats(activities)}"
    nullStats: "${getStats(missing)}"
  - hobbies: ["reading", "coding"]
    activities: []
out:
  stats:
    count: 2
    isEmpty: false
    summary: "2 items"
  emptyStats:
    count: 0
    isEmpty: true
    summary: "0 items"
  nullStats:
    count: 0
    isEmpty: true
    summary: "0 items"
---
case: nested objects with object-returning functions
in:
  - data:
      user: "${createUser(name, age)}"
      statistics: "${getStats(items)}"
      nested:
        profile: "${createUser(firstName, years)}"
  - name: "Charlie"
    age: 30
    items: ["a", "b", "c"]
    firstName: "Diana"
    years: 22
out:
  data:
    user:
      name: "Charlie"
      age: 30
      isAdult: true
      metadata:
        createdAt: 1640995200000
        version: 1
    statistics:
      count: 3
      isEmpty: false
      summary: "3 items"
    nested:
      profile:
        name: "Diana"
        age: 22
        isAdult: true
        metadata:
          createdAt: 1640995200000
          version: 1
---
case: partials with custom functions - math operations
in:
  - $partial: "calculation"
    x: 10
    y: 5
  - {}
  - partials:
      calculation:
        input: "x=${x}, y=${y}"
        sum: "${add(x, y)}"
        product: "${multiply(x, y)}"
        formula: "${multiply(add(x, y), 2)}"
out:
  input: "x=10, y=5"
  sum: 15
  product: 50
  formula: 30
---
case: partials with custom functions - string manipulation
in:
  - profile:
      $partial: "userProfile"
      firstName: "john"
      lastName: "doe"
  - {}
  - partials:
      userProfile:
        firstName: "${capitalize(firstName)}"
        lastName: "${uppercase(lastName)}"
        fullName: "${concat(capitalize(firstName), ' ', uppercase(lastName))}"
        initials: "${getInitials(firstName, lastName)}"
out:
  profile:
    firstName: "John"
    lastName: "DOE"
    fullName: "John DOE"
    initials: "JD"
---
case: partials with functions returning objects
in:
  - users:
      - $partial: "userCard"
        name: "Alice"
        age: 25
        hobbies: ["reading", "coding"]
      - $partial: "userCard"
        name: "Bob"
        age: 17
        hobbies: []
  - {}
  - partials:
      userCard:
        user: "${createUser(name, age)}"
        stats: "${getStats(hobbies)}"
        summary: "${name} (${age}): ${size(hobbies)} hobbies"
out:
  users:
    - user:
        name: "Alice"
        age: 25
        isAdult: true
        metadata:
          createdAt: 1640995200000
          version: 1
      stats:
        count: 2
        isEmpty: false
        summary: "2 items"
      summary: "Alice (25): 2 hobbies"
    - user:
        name: "Bob"
        age: 17
        isAdult: false
        metadata:
          createdAt: 1640995200000
          version: 1
      stats:
        count: 0
        isEmpty: true
        summary: "0 items"
      summary: "Bob (17): 0 hobbies"
---
case: nested partials with custom functions
in:
  - $partial: "page"
    title: "welcome page"
    numbers: [1, 2, 3, 4, 5]
  - {}
  - partials:
      page:
        header:
          $partial: "header"
        content: "Numbers: ${join(numbers, ', ')}"
        total: "${add(numbers[0], numbers[4])}"
      header:
        title: "${capitalize(title)}"
        length: "${length(title)}"
        uppercase: "${uppercase(title)}"
out:
  header:
    title: "Welcome page"
    length: 12
    uppercase: "WELCOME PAGE"
  content: "Numbers: 1, 2, 3, 4, 5"
  total: 6
---
case: partials in loop with custom functions
in:
  - items:
      - $for item in items:
          $partial: "processedItem"
  - items:
      - name: "apple"
        price: 1.50
        quantity: 3
      - name: "banana"
        price: 0.75
        quantity: 6
      - name: "orange"
        price: 2.00
        quantity: 2
  - partials:
      processedItem:
        name: "${capitalize(item.name)}"
        price: "${item.price}"
        quantity: "${item.quantity}"
        total: "${multiply(item.price, item.quantity)}"
        label: "${uppercase(item.name)}: ${round(multiply(item.price, item.quantity), 2)}"
out:
  items:
    - name: "Apple"
      price: 1.5
      quantity: 3
      total: 4.5
      label: "APPLE: 4.5"
    - name: "Banana"
      price: 0.75
      quantity: 6
      total: 4.5
      label: "BANANA: 4.5"
    - name: "Orange"
      price: 2
      quantity: 2
      total: 4
      label: "ORANGE: 4"
---
case: $each with function iterable
in:
  - sorted:
      - $each: item, idx in sortBy(items, 'priority')
        rank: "${idx}"
        name: "${item.name}"
        priority: "${item.priority}"
  - items:
      - name: "Task C"
        priority: 3
      - name: "Task A"
        priority: 1
      - name: "Task B"
        priority: 2
out:
  sorted:
    - rank: 0
      name: "Task A"
      priority: 1
    - rank: 1
      name: "Task B"
      priority: 2
    - rank: 2
      name: "Task C"
      priority: 3
---
case: $each with mixed types and conditional properties
in:
  - output:
      - $each: item, i in data
        index: "${i}"
        value: "${item}"
        type:
          $if typeof(item) == 'string': "text"
          $elif typeof(item) == 'number': "numeric"
          $elif typeof(item) == 'boolean': "boolean"
          $else: "object"
        display:
          $if item != null: "${item}"
          $else: "N/A"
  - data: ["hello", 42, true, null, {"key": "value"}]
out:
  output:
    - index: 0
      value: "hello"
      type: "text"
      display: "hello"
    - index: 1
      value: 42
      type: "numeric"
      display: 42
    - index: 2
      value: true
      type: "boolean"
      display: true
    - index: 3
      value: null
      type: "object"
      display: "N/A"
    - index: 4
      value: {"key": "value"}
      type: "object"
      display: {"key": "value"}